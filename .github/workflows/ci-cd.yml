name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with black
      run: |
        black --check .
    
    - name: Type check with mypy
      run: |
        mypy time_mcp_server/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
    
    - name: Test standalone mode
      run: |
        timeout 10s python -m time_mcp_server --standalone || true
    
    - name: Test HTTP server
      run: |
        python -m time_mcp_server --http &
        SERVER_PID=$!
        sleep 5
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/time/UTC
        curl -f http://localhost:8080/timezones
        kill $SERVER_PID

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t time-mcp-server:latest .
    
    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 --name test-server time-mcp-server:latest
        sleep 10
        curl -f http://localhost:8080/health
        docker stop test-server
        docker rm test-server
    
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker tag time-mcp-server:latest ${{ secrets.DOCKER_USERNAME }}/time-mcp-server:latest
        docker tag time-mcp-server:latest ${{ secrets.DOCKER_USERNAME }}/time-mcp-server:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/time-mcp-server:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/time-mcp-server:${{ github.sha }}

  deploy-koyeb:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Koyeb CLI
      run: |
        curl -L https://github.com/koyeb/koyeb-cli/releases/latest/download/koyeb-linux-amd64.tar.gz | tar xz
        sudo mv koyeb /usr/local/bin/
    
    - name: Deploy to Koyeb
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
      run: |
        koyeb auth login --api-token "$KOYEB_TOKEN"
        koyeb service redeploy time-mcp-python || koyeb service create time-mcp-python \
          --git https://github.com/${{ github.repository }} \
          --git-branch main \
          --ports 8080:http \
          --env PORT=8080 \
          --env PYTHON_VERSION=3.11 \
          --env ENVIRONMENT=production
